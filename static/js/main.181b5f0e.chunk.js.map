{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","utils.ts","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","query","status","startFilter","ALL","filterReducer","filterState","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","selectedTodo","visibleTodos","useMemo","filteredTodos","ACTIVE","completed","COMPLETED","trim","title","toLowerCase","includes","getVisibleTodos","length","className","map","classNames","id","onClick","currentTodoActions","TodoFilter","setQuery","newQuery","filterActions","onSubmit","event","preventDefault","value","onChange","newStatus","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","useEffect","userId","href","email","name","App","setTodos","newTodos","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.181b5f0e.chunk.js","sourcesContent":["export enum Status {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype SetFilterAction = {\n  type: 'filter/SET_FILTER';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetFilterAction => ({\n  type: 'filter/SET_FILTER',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype Filter = {\n  query: '';\n  status: Status;\n};\n\nconst startFilter: Filter = { query: '', status: Status.ALL };\n\ntype Action = SetQueryAction | SetFilterAction;\n\nconst filterReducer = (\n  filterState: Filter = startFilter,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...filterState, query: action.payload };\n\n    case 'filter/SET_FILTER':\n      return { ...filterState, status: action.payload };\n\n    default:\n      return filterState;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { Todo } from '../../types/Todo';\nimport { getVisibleTodos } from '../../utils';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const { status, query } = useAppSelector(state => state.filter);\n\n  const setSelectedTodo = (newTodo: Todo) => dispatch(currentTodoActions.setTodo(newTodo));\n\n  const visibleTodos = useMemo(() => {\n    return getVisibleTodos(todos, status, query);\n  }, [todos, status, query]);\n\n  return (\n    <>\n      {!visibleTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n                className={classNames({\n                  'has-background-info-light': selectedTodo !== null\n                    && selectedTodo.id === todo.id,\n                })}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                {todo.completed ? (\n                  <td className=\"is-vcentered\">\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"is-vcentered\" />\n                )}\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={todo.completed\n                      ? 'has-text-success'\n                      : 'has-text-danger'}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => setSelectedTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={\n                        selectedTodo?.id === todo.id\n                          ? 'far fa-eye-slash'\n                          : 'far fa-eye'\n                      }\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import { Status } from './types/Status';\nimport { Todo } from './types/Todo';\n\nexport const getVisibleTodos = (\n  todos: Todo[],\n  status: Status,\n  query: string,\n): Todo[] => {\n  const filteredTodos = todos.filter(todo => {\n    switch (status) {\n      case Status.ACTIVE: return !todo.completed;\n\n      case Status.COMPLETED: return todo.completed;\n\n      default: return true;\n    }\n  });\n\n  if (query.trim()) {\n    return filteredTodos.filter(todo => todo.title.toLowerCase()\n      .includes(query.toLowerCase()));\n  }\n\n  return filteredTodos;\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { query, status } = useAppSelector(state => state.filter);\n\n  const setStatus = (newStatus: Status) => {\n    return dispatch(filterActions.setStatus(newStatus));\n  };\n\n  const setQuery = (newQuery: string) => {\n    return dispatch(filterActions.setQuery(newQuery));\n  };\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setStatus(event.target.value as Status);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleClearQuery = () => {\n    setQuery('');\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value={Status.ALL}>All</option>\n            <option value={Status.ACTIVE}>Active</option>\n            <option value={Status.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={(handleClearQuery)}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n\n  const deleteTodo = () => dispatch(currentTodoActions.removeTodo());\n\n  useEffect(() => {\n    if (selectedTodo?.userId) {\n      getUser(selectedTodo.userId).then(setUser);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {selectedTodo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={deleteTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {selectedTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { actions as todosActions } from './features/todos';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const todos = useAppSelector(state => state.todos);\n\n  const setTodos = (newTodos: Todo[]) => dispatch(todosActions.setTodos(newTodos));\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {todos.length ? <TodoList /> : <Loader /> }\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && <TodoModal /> }\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}